// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "mgufrone.dev/job-tracking/app/models"
)

// JobApplication is an autogenerated mock type for the JobApplication type
type JobApplication struct {
	mock.Mock
}

// ApplicationsByStatus provides a mock function with given fields: ctx, status
func (_m *JobApplication) ApplicationsByStatus(ctx context.Context, status int) ([]*models.JobApplication, int64, error) {
	ret := _m.Called(ctx, status)

	var r0 []*models.JobApplication
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.JobApplication, int64, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.JobApplication); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.JobApplication)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) int64); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, status)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateUserApplication provides a mock function with given fields: ctx, user, application
func (_m *JobApplication) CreateUserApplication(ctx context.Context, user *models.User, application *models.JobApplication) error {
	ret := _m.Called(ctx, user, application)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User, *models.JobApplication) error); ok {
		r0 = rf(ctx, user, application)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserApplication provides a mock function with given fields: ctx, user, application
func (_m *JobApplication) DeleteUserApplication(ctx context.Context, user *models.User, application *models.JobApplication) error {
	ret := _m.Called(ctx, user, application)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User, *models.JobApplication) error); ok {
		r0 = rf(ctx, user, application)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserApplications provides a mock function with given fields: ctx, user
func (_m *JobApplication) GetUserApplications(ctx context.Context, user *models.User) ([]*models.JobApplication, int64, error) {
	ret := _m.Called(ctx, user)

	var r0 []*models.JobApplication
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) ([]*models.JobApplication, int64, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) []*models.JobApplication); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.JobApplication)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.User) int64); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *models.User) error); ok {
		r2 = rf(ctx, user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateUserApplication provides a mock function with given fields: ctx, user, application
func (_m *JobApplication) UpdateUserApplication(ctx context.Context, user *models.User, application *models.JobApplication) error {
	ret := _m.Called(ctx, user, application)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User, *models.JobApplication) error); ok {
		r0 = rf(ctx, user, application)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewJobApplication creates a new instance of JobApplication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobApplication {
	mock := &JobApplication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
